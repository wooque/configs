#!/usr/bin/env python3
import sys
import subprocess
import os
import itertools

img_help = "qemu img [name] size"

def img(*args):
    if len(args) == 0 or len(args) == 1 and (args[0] in ["-h", "--help"]):
        print(img_help)
        return

    if not args[0].endswith("img"):
        args = ["disk.img"] + list(args)

    p = subprocess.Popen(["qemu-img", "create", "-f", "qcow2", args[0], args[1]])
    p.wait()

run_help = "qemu run [img_name] [options]"
run_options = """
Set cdrom:
-cdrom disk.iso

Forward port from guest to host:
-nic user,hostfwd=tcp::10022-:22

Expose usb device to guest:
-device usb-host,vendorid=0x0a5c,productid=0x5804

Command line control:
-monitor stdio
"""
win_cpu_opts = "host,hv_relaxed,hv_spinlocks=0x1fff,hv_vapic,hv_time"

def run(*args):
    if len(args) == 1 and (args[0] in ["-h", "--help"]):
        print(run_help)
        print(run_options)
        return

    base_args = {
        "-daemonize": "",
        "-enable-kvm": "",
        "-cpu": "host",
        "-smp": "4,cores=2",
        "-m": "2048",
        "-drive": "",
        "-soundhw": "hda",
        "-nic": "user",
        "-usb": "",
        "-device": "usb-tablet",
    }
    drive_fmt = 'file={},format=qcow2,l2-cache-size=4M'

    if len(args) and args[0].endswith("img"):
        drive = args[0]
        rest = args[1:]
    else:
        imgs = [e for e in os.listdir() if e.endswith("img")]
        if len(imgs) > 1:
            print("Found multiple images: {}".format(", ".join(imgs)))
            return
        elif len(imgs) == 0:
            print("No images found")
            return
        else:
            drive = imgs[0]
            rest = args

    base_args["-drive"] = drive_fmt.format(drive)
    if "win" in drive.lower():
        base_args["-cpu"] = win_cpu_opts
    else:
        base_args["-drive"] += ',if=virtio'
        base_args["-nic"] += ',model=virtio'

    for a in args:
        if a in ["-cpu", "-smp", "-m", "-drive", "-soundhw", "-nic"] and a in base_args:
            del base_args[a]
        elif a == "-monitor":
            del base_args["-daemonize"]

    flat_args = [e for e in itertools.chain.from_iterable(base_args.items()) if e != '']
    all_args = flat_args + list(rest)
    print("Options: {}".format(" ".join(all_args)))
    p = subprocess.Popen(["qemu-system-x86_64"] + all_args)
    try:
        p.wait()
    except:
        pass

def main():
    if len(sys.argv) == 1:
        print(f"Commands are '{img_help}' or '{run_help}'")
        return

    if sys.argv[1] == 'img':
        img(*sys.argv[2:])
        return

    if sys.argv[1] == 'run':
        run(*sys.argv[2:])
        return

if __name__ == "__main__":
    main()
